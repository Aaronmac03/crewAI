#!/usr/bin/env python3
"""
DLG4 SHINE Foundation Grant Research and Application System

This is the specialized system generated by the MetaCrew for automating
grant discovery, analysis, and application writing for the DLG4 SHINE Foundation.

Based on the MetaCrew evaluation, this system will:
1. Research the DLG4 SHINE Foundation thoroughly
2. Discover and analyze grant opportunities
3. Generate 3-5 high-probability grant targets
4. Create submission-ready grant applications
"""

import os
import json
import csv
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict, Any

from dotenv import load_dotenv
from crewai import Agent, Task, Crew, Process
from crewai_tools import SerperDevTool
from crewai.tools import BaseTool
from langchain_openai import ChatOpenAI
from pydantic import BaseModel, Field

# Load environment variables from .env file
load_dotenv()

# Custom tool wrapper to make Serper usage robust against varying tool inputs
class WebSearchInput(BaseModel):
    # Accept several common field names and shapes the agent might produce
    query: str | None = Field(None, description="Primary search query string")
    search_query: str | None = Field(None, description="Alias for query")
    description: str | None = Field(None, description="Fallback text often used by some planners")
    metadata: Dict[str, Any] | None = Field(None, description="Ignored; carried through by some tools")

class WebSearchTool(BaseTool):
    name: str = "web_search"
    description: str = "Search the internet for information using a search query string"
    args_schema: type[BaseModel] = WebSearchInput
    
    def __init__(self, smoke_mode: bool = False):
        super().__init__()
        self._serper = SerperDevTool()
        self.smoke_mode = smoke_mode or os.getenv("DLG4_SMOKE") == "1"
    
    def _run(
        self,
        query: str | None = None,
        search_query: str | None = None,
        description: str | None = None,
        **kwargs: Any,
    ) -> str:
        # Choose the first non-empty candidate as the query
        q = next(
            (v for v in (query, search_query, description) if isinstance(v, str) and v.strip()),
            None,
        )
        # Additional fallbacks from loosely structured inputs
        if not q:
            if isinstance(kwargs.get("input"), str) and kwargs["input"].strip():
                q = kwargs["input"].strip()
            elif "messages" in kwargs and isinstance(kwargs["messages"], list) and kwargs["messages"]:
                # Try to extract last user content if available
                for m in reversed(kwargs["messages"]):
                    if isinstance(m, dict) and m.get("role") == "user":
                        content = m.get("content")
                        if isinstance(content, str) and content.strip():
                            q = content.strip()
                            break
        if not q:
            return f"Search failed: no query provided. Input args: query={query}, search_query={search_query}, description={description}, kwargs={kwargs}"

        if self.smoke_mode:
            return f"This is a smoke test search result for query: {q}"

        try:
            result = self._serper.run(search_query=q)
            return str(result)
        except Exception as e:
            return f"Search failed due to an exception with the search provider: {str(e)}. Check your API key, quota, and network connection."

# Simple file write function since FileWriteTool isn't available
def write_file(filename: str, content: str) -> str:
    """Write content to a file and return confirmation."""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        return f"Successfully wrote content to {filename}"
    except Exception as e:
        return f"Error writing to {filename}: {str(e)}"

# Configuration
DATE_ANCHOR = "2025-09-11"
FOUNDATION_NAME = "DLG4 SHINE Foundation"
OUTPUT_DIR = Path("out")
APPLICATIONS_DIR = OUTPUT_DIR / "applications"

# Ensure output directories exist
OUTPUT_DIR.mkdir(exist_ok=True)
APPLICATIONS_DIR.mkdir(exist_ok=True)

class DLG4GrantSystem:
    def __init__(self, smoke_mode: bool = False):
        self.llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.1)
        self.smoke_mode = smoke_mode
        self.search_tool = WebSearchTool(smoke_mode=self.smoke_mode)
        
        # Initialize agents
        self.foundation_researcher = self._create_foundation_researcher()
        self.grant_discoverer = self._create_grant_discoverer()
        self.eligibility_analyst = self._create_eligibility_analyst()
        self.application_planner = self._create_application_planner()
        self.grant_writer = self._create_grant_writer()
        self.qa_specialist = self._create_qa_specialist()
    
    def _create_foundation_researcher(self) -> Agent:
        return Agent(
            role="Foundation Research Specialist",
            goal=f"Build a comprehensive expert profile of the {FOUNDATION_NAME} including mission, history, programs, geographic scope, beneficiaries, governance, financials, past grants, partners, and differentiators.",
            backstory="You are an expert researcher specializing in nonprofit foundation analysis. You excel at gathering comprehensive organizational intelligence from public sources and creating detailed profiles that inform strategic grant-seeking decisions.",
            tools=[self.search_tool],
            llm=self.llm,
            verbose=True
        )
    
    def _create_grant_discoverer(self) -> Agent:
        return Agent(
            role="Grant Discovery Specialist",
            goal=f"Find current and upcoming grants from public/private funders aligned to the {FOUNDATION_NAME}. Focus on opportunities with deadlines after {DATE_ANCHOR}.",
            backstory="You are a grant discovery expert who knows all the major funding databases, government portals, and foundation websites. You excel at finding hidden opportunities and maintaining comprehensive grant databases.",
            tools=[self.search_tool],
            llm=self.llm,
            verbose=True
        )
    
    def _create_eligibility_analyst(self) -> Agent:
        return Agent(
            role="Eligibility and Fit Analyst",
            goal="Score grants using the evaluation rubric, filter deadlines, and produce a 3-5 grant shortlist with defensible rationale.",
            backstory="You are an expert grant analyst who excels at evaluating grant opportunities against organizational fit criteria. You use systematic scoring rubrics and provide transparent, reproducible analysis.",
            tools=[],
            llm=self.llm,
            verbose=True
        )
    
    def _create_application_planner(self) -> Agent:
        return Agent(
            role="Application Planning Specialist",
            goal="Extract full application requirements, map criteria, identify needed attachments, and produce detailed outlines tailored to each grant.",
            backstory="You are a meticulous grant application planner who excels at breaking down complex RFPs into actionable requirements and creating winning application strategies.",
            tools=[self.search_tool],
            llm=self.llm,
            verbose=True
        )
    
    def _create_grant_writer(self) -> Agent:
        return Agent(
            role="Grant Writing Specialist",
            goal="Draft complete narratives and supporting materials for each shortlisted grant, adhering to prompts, limits, and funder tone.",
            backstory="You are an expert grant writer with a track record of winning applications. You excel at crafting compelling narratives that align with funder priorities while staying within strict formatting requirements.",
            tools=[],
            llm=self.llm,
            verbose=True
        )
    
    def _create_qa_specialist(self) -> Agent:
        return Agent(
            role="QA and Compliance Specialist",
            goal="Validate completeness, style, compliance, citations, and attachment checklists; prepare final handoff packages.",
            backstory="You are a detail-oriented quality assurance specialist who ensures grant applications meet all requirements and are submission-ready. You catch errors others miss and ensure professional presentation.",
            tools=[],
            llm=self.llm,
            verbose=True
        )
    
    def create_tasks(self) -> List[Task]:
        """Create the sequence of tasks for the grant system."""
        
        # Task 1: Foundation Research
        foundation_research_task = Task(
            description=f"""
            Research and create a comprehensive profile of the {FOUNDATION_NAME}.
            
            Include:
            - Mission statement and core values
            - History and founding story
            - Current programs and focus areas
            - Geographic scope and target beneficiaries
            - Governance structure and leadership
            - Financial information (if available)
            - Past grants and funding patterns
            - Key partners and collaborations
            - Unique differentiators and competitive advantages
            - Key narratives suitable for grant applications
            
            Save the profile as: out/foundation_profile_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md
            
            Use official sources and cite all information with URLs and access dates.
            """,
            expected_output="Comprehensive foundation profile document with all required sections and proper citations.",
            agent=self.foundation_researcher
        )

        if self.smoke_mode:
            application_planning_task = Task(
                description="""
                For a dummy 'Smoke Test Grant', create detailed application plans and requirements analysis.
                
                Create a folder: out/applications/smoke-test-grant/
                
                Generate these files for the grant:
                1. 01_grant_brief.md: Eligibility mapping, alignment rationale, risks, go/no-go decision
                2. 02_requirements_checklist.md: Itemized prompts, limits, attachments, compliance checks
                3. 03_outline.md: Structured outline mapped to prompts and scoring criteria
                
                Ensure the plan is tailored to a generic grant's requirements.
                """,
                expected_output="Complete application planning package for the smoke test grant.",
                agent=self.application_planner,
                context=[foundation_research_task]
            )
            return [foundation_research_task, application_planning_task]
        
        # Task 2: Grant Discovery
        grant_discovery_task = Task(
            description=f"""
            Discover grants aligned with the {FOUNDATION_NAME} profile and focus areas.
            
            Search for:
            - Federal grants (grants.gov, agency websites)
            - State and local government grants
            - Private foundation grants
            - Corporate giving programs
            - Program-specific opportunities
            
            Filter criteria:
            - Deadlines strictly after {DATE_ANCHOR}
            - Alignment with foundation's mission and programs
            - Appropriate funding amounts
            - Geographic eligibility
            
            Create a comprehensive longlist with columns:
            - Grant Name
            - Funder
            - Deadline
            - Amount
            - Link to Opportunity
            - Eligibility Notes
            - Source
            - Freshness Date (last checked)
            
            Save as: out/grant_longlist_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv
            """,
            expected_output="Comprehensive CSV file with all viable grant opportunities meeting the criteria.",
            agent=self.grant_discoverer,
            context=[foundation_research_task]
        )
        
        # Task 3: Eligibility Analysis
        eligibility_analysis_task = Task(
            description=f"""
            Analyze the grant longlist using the evaluation rubric and create a shortlist of 3-5 top opportunities.
            
            Evaluation Rubric (score 1-5 for each):
            - Mission Alignment: Fit with {FOUNDATION_NAME} focus areas
            - Eligibility: Entity type, geography, budget requirements
            - Timing: Adequate lead time for application completion
            - Funding Value: Amount, term, allowable costs
            - Competitiveness: Historic award rates, typical awardees
            - Burden: Application complexity, reporting requirements
            - Strategic Value: Relationship potential, renewals
            - Readiness: Document availability, capacity to execute
            
            For each grant, provide:
            - Individual scores (1-5) for each rubric dimension
            - Weighted overall score with explanation
            - Rationale for inclusion/exclusion
            - Risk assessment
            
            Create shortlist with top 3-5 grants.
            Save as: out/grant_shortlist_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv
            """,
            expected_output="Scored and ranked shortlist of 3-5 grants with detailed rationale and risk assessment.",
            agent=self.eligibility_analyst,
            context=[foundation_research_task, grant_discovery_task]
        )
        
        # Task 4: Application Planning
        application_planning_task = Task(
            description="""
            For each shortlisted grant, create detailed application plans and requirements analysis.
            
            For each grant, create a folder: out/applications/<grant_slug>/
            
            Generate these files for each grant:
            1. 01_grant_brief.md: Eligibility mapping, alignment rationale, risks, go/no-go decision
            2. 02_requirements_checklist.md: Itemized prompts, limits, attachments, compliance checks
            3. 03_outline.md: Structured outline mapped to prompts and scoring criteria
            
            Ensure each plan is tailored to the specific funder's requirements and evaluation criteria.
            """,
            expected_output="Complete application planning package for each shortlisted grant with detailed requirements and outlines.",
            agent=self.application_planner,
            context=[foundation_research_task, eligibility_analysis_task]
        )
        
        # Task 5: Grant Writing
        grant_writing_task = Task(
            description="""
            Draft complete grant applications for each shortlisted opportunity.
            
            For each grant, add to the application folder:
            4. 04_draft_application.md: Complete narrative tailored to funder requirements
            5. 05_budget.xlsx: Draft budget with line items and justifications
            6. 06_citations.md: All sources used with URLs and access dates
            
            Requirements:
            - Adhere to all word/character limits
            - Use funder-specific language and terminology
            - Address all prompts and evaluation criteria
            - Maintain consistent tone and professional style
            - Include specific examples and evidence
            - Ensure 90%+ submission readiness
            """,
            expected_output="Complete draft applications for all shortlisted grants, ready for final review and submission.",
            agent=self.grant_writer,
            context=[foundation_research_task, application_planning_task]
        )
        
        # Task 6: QA and Final Package
        qa_task = Task(
            description="""
            Conduct final quality assurance and prepare submission packages.
            
            For each grant application:
            1. Verify completeness against requirements checklist
            2. Check compliance with formatting and limits
            3. Validate citations and sources
            4. Review for consistency and professional presentation
            5. Create submission timeline and final steps
            
            Add to each application folder:
            7. 07_submission_plan.md: Timeline, tasks, and submission steps
            
            Create final status report:
            out/status_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json
            
            Include progress summary, chosen grants, and any blockers or recommendations.
            """,
            expected_output="Quality-assured submission packages with final status report and next steps.",
            agent=self.qa_specialist,
            context=[foundation_research_task, application_planning_task, grant_writing_task]
        )
        
        return [
            foundation_research_task,
            grant_discovery_task,
            eligibility_analysis_task,
            application_planning_task,
            grant_writing_task,
            qa_task
        ]
    
    def run(self):
        """Execute the complete DLG4 grant research and application system."""
        print("=" * 70)
        print(f"DLG4 SHINE Foundation Grant System")
        print("=" * 70)
        print(f"Foundation: {FOUNDATION_NAME}")
        print(f"Date Anchor: {DATE_ANCHOR}")
        print(f"Output Directory: {OUTPUT_DIR}")
        print("=" * 70)
        print()
        
        # Create tasks
        tasks = self.create_tasks()
        
        # Create crew
        crew = Crew(
            agents=list({id(task.agent): task.agent for task in tasks if task.agent}.values()),
            tasks=tasks,
            process=Process.sequential,
            verbose=True
        )
        
        # Execute
        try:
            print("Starting DLG4 Grant System execution...")
            result = crew.kickoff()
            
            print("\n" + "=" * 70)
            print("DLG4 GRANT SYSTEM COMPLETED!")
            print("=" * 70)
            print("\nDeliverables created:")
            print("• Foundation profile and analysis")
            print("• Grant longlist and shortlist")
            print("• Complete application packages")
            print("• Submission plans and timelines")
            print(f"\nCheck the '{OUTPUT_DIR}' directory for all outputs.")
            
            return result
            
        except Exception as e:
            print(f"\nError during execution: {str(e)}")
            
            # Create blocker report
            blocker_report = {
                "timestamp": datetime.now().isoformat(),
                "error": str(e),
                "summary": "System execution failed",
                "options": [
                    "Check API keys and credentials",
                    "Verify internet connection for web searches",
                    "Review error logs for specific issues"
                ],
                "requests": [
                    "Verify OpenAI API key is set",
                    "Verify Serper API key is set",
                    "Check system permissions for file writing"
                ],
                "impact": "Grant discovery and application process halted"
            }
            
            blocker_file = OUTPUT_DIR / f"BLOCKER_REPORT_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(blocker_file, 'w') as f:
                json.dump(blocker_report, f, indent=2)
            
            print(f"Blocker report saved to: {blocker_file}")
            raise

def main():
    """Main entry point for the DLG4 Grant System."""
    import argparse
    
    # Declare globals first
    global FOUNDATION_NAME, DATE_ANCHOR, OUTPUT_DIR, APPLICATIONS_DIR
    
    parser = argparse.ArgumentParser(description="DLG4 SHINE Foundation Grant Research and Application System")
    parser.add_argument("--foundation", default=FOUNDATION_NAME, help="Foundation name to research")
    parser.add_argument("--date-anchor", default=DATE_ANCHOR, help="Date anchor for deadline filtering")
    parser.add_argument("--output-dir", default=str(OUTPUT_DIR), help="Output directory for results")
    parser.add_argument("--smoke", action="store_true", help="Run in smoke test mode with canned data")
    
    args = parser.parse_args()
    
    # Update global configuration
    FOUNDATION_NAME = args.foundation
    DATE_ANCHOR = args.date_anchor
    OUTPUT_DIR = Path(args.output_dir)
    APPLICATIONS_DIR = OUTPUT_DIR / "applications"
    
    # Ensure directories exist
    OUTPUT_DIR.mkdir(exist_ok=True)
    APPLICATIONS_DIR.mkdir(exist_ok=True)
    
    # Check for required environment variables
    required_env_vars = ["OPENAI_API_KEY"]
    if not args.smoke:
        required_env_vars.append("SERPER_API_KEY")
    
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        print("Missing required environment variables:")
        for var in missing_vars:
            print(f"   - {var}")
        if "SERPER_API_KEY" in missing_vars:
            print("\nSERPER_API_KEY is required for web searches. To run without it, use the --smoke flag.")
        else:
            print("\nPlease set these in your .env file or environment.")
        return 1
    
    # Run the system
    system = DLG4GrantSystem(smoke_mode=args.smoke)
    system.run()
    
    return 0

if __name__ == "__main__":
    exit(main())
